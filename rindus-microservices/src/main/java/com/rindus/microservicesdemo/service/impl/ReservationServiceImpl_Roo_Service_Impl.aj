// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.microservicesdemo.service.impl;

import com.rindus.microservicesdemo.domain.Customer;
import com.rindus.microservicesdemo.domain.Reservation;
import com.rindus.microservicesdemo.domain.Stock;
import com.rindus.microservicesdemo.repository.ReservationRepository;
import com.rindus.microservicesdemo.service.impl.ReservationServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ReservationServiceImpl_Roo_Service_Impl {
    
    declare @type: ReservationServiceImpl: @Service;
    
    declare @type: ReservationServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ReservationRepository ReservationServiceImpl.reservationRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param reservationRepository
     */
    @Autowired
    public ReservationServiceImpl.new(ReservationRepository reservationRepository) {
        setReservationRepository(reservationRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ReservationRepository
     */
    public ReservationRepository ReservationServiceImpl.getReservationRepository() {
        return reservationRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param reservationRepository
     */
    public void ReservationServiceImpl.setReservationRepository(ReservationRepository reservationRepository) {
        this.reservationRepository = reservationRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param reservation
     */
    @Transactional
    public void ReservationServiceImpl.delete(Reservation reservation) {
        // Clear bidirectional many-to-one child relationship with Stock
        if (reservation.getStockItem() != null) {
            reservation.getStockItem().getReservas().remove(reservation);
        }
        
        // Clear bidirectional many-to-one child relationship with Customer
        if (reservation.getCustomer() != null) {
            reservation.getCustomer().getReservas().remove(reservation);
        }
        
        getReservationRepository().delete(reservation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Reservation> ReservationServiceImpl.save(Iterable<Reservation> entities) {
        return getReservationRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ReservationServiceImpl.delete(Iterable<Long> ids) {
        List<Reservation> toDelete = getReservationRepository().findAll(ids);
        getReservationRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Reservation
     */
    @Transactional
    public Reservation ReservationServiceImpl.save(Reservation entity) {
        return getReservationRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Reservation
     */
    public Reservation ReservationServiceImpl.findOne(Long id) {
        return getReservationRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Reservation
     */
    public Reservation ReservationServiceImpl.findOneForUpdate(Long id) {
        return getReservationRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Reservation> ReservationServiceImpl.findAll(Iterable<Long> ids) {
        return getReservationRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Reservation> ReservationServiceImpl.findAll() {
        return getReservationRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ReservationServiceImpl.count() {
        return getReservationRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getReservationRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getReservationRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationServiceImpl.findByCustomer(Customer customer, GlobalSearch globalSearch, Pageable pageable) {
        return getReservationRepository().findByCustomer(customer, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stockItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationServiceImpl.findByStockItem(Stock stockItem, GlobalSearch globalSearch, Pageable pageable) {
        return getReservationRepository().findByStockItem(stockItem, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @return Long
     */
    public long ReservationServiceImpl.countByCustomer(Customer customer) {
        return getReservationRepository().countByCustomer(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stockItem
     * @return Long
     */
    public long ReservationServiceImpl.countByStockItem(Stock stockItem) {
        return getReservationRepository().countByStockItem(stockItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Reservation> ReservationServiceImpl.getEntityType() {
        return Reservation.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ReservationServiceImpl.getIdType() {
        return Long.class;
    }
    
}
