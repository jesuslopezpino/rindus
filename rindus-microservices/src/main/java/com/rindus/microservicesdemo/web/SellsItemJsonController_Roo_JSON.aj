// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.microservicesdemo.web;

import com.rindus.microservicesdemo.domain.Sell;
import com.rindus.microservicesdemo.service.api.SellService;
import com.rindus.microservicesdemo.web.SellsItemJsonController;
import io.springlets.web.NotFoundException;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;
import org.springframework.web.util.UriComponents;

privileged aspect SellsItemJsonController_Roo_JSON {
    
    declare @type: SellsItemJsonController: @RestController;
    
    declare @type: SellsItemJsonController: @RequestMapping(value = "/sells/{sell}", name = "SellsItemJsonController", produces = MediaType.APPLICATION_JSON_VALUE);
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param sellService
     */
    @Autowired
    public SellsItemJsonController.new(SellService sellService) {
        this.sellService = sellService;
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Sell
     */
    @ModelAttribute
    public Sell SellsItemJsonController.getSell(@PathVariable("sell") Long id) {
        Sell sell = sellService.findOne(id);
        if (sell == null) {
            throw new NotFoundException(String.format("Sell with identifier '%s' not found",id));
        }
        return sell;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param sell
     * @return ResponseEntity
     */
    @GetMapping(name = "show")
    public ResponseEntity<?> SellsItemJsonController.show(@ModelAttribute Sell sell) {
        return ResponseEntity.ok(sell);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param sell
     * @return UriComponents
     */
    public static UriComponents SellsItemJsonController.showURI(Sell sell) {
        return MvcUriComponentsBuilder
            .fromMethodCall(
                MvcUriComponentsBuilder.on(SellsItemJsonController.class).show(sell))
            .buildAndExpand(sell.getId()).encode();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param storedSell
     * @param sell
     * @param result
     * @return ResponseEntity
     */
    @PutMapping(name = "update")
    public ResponseEntity<?> SellsItemJsonController.update(@ModelAttribute Sell storedSell, @Valid @RequestBody Sell sell, BindingResult result) {
        
        if (result.hasErrors()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).body(result);
        }
        sell.setId(storedSell.getId());
        getSellService().save(sell);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param sell
     * @return ResponseEntity
     */
    @DeleteMapping(name = "delete")
    public ResponseEntity<?> SellsItemJsonController.delete(@ModelAttribute Sell sell) {
        getSellService().delete(sell);
        return ResponseEntity.ok().build();
    }
    
}
