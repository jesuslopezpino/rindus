// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.rindus.reservationdemo.domain.Product;
import com.rindus.reservationdemo.domain.QStock;
import com.rindus.reservationdemo.domain.Stock;
import com.rindus.reservationdemo.repository.StockRepositoryCustom;
import com.rindus.reservationdemo.repository.StockRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect StockRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: StockRepositoryImpl implements StockRepositoryCustom;
    
    declare @type: StockRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StockRepositoryImpl.PRODUCTO = "producto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StockRepositoryImpl.DATE_IN = "dateIn";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String StockRepositoryImpl.DATE_OUT = "dateOut";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Stock> StockRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QStock stock = QStock.stock;
        
        JPQLQuery<Stock> query = from(stock);
        
        Path<?>[] paths = new Path<?>[] {stock.producto,stock.dateIn,stock.dateOut};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCTO, stock.producto)
			.map(DATE_IN, stock.dateIn)
			.map(DATE_OUT, stock.dateOut);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Stock> StockRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QStock stock = QStock.stock;
        
        JPQLQuery<Stock> query = from(stock);
        
        Path<?>[] paths = new Path<?>[] {stock.producto,stock.dateIn,stock.dateOut};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(stock.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCTO, stock.producto)
			.map(DATE_IN, stock.dateIn)
			.map(DATE_OUT, stock.dateOut);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Stock> StockRepositoryImpl.findByProducto(Product producto, GlobalSearch globalSearch, Pageable pageable) {
        
        QStock stock = QStock.stock;
        
        JPQLQuery<Stock> query = from(stock);
        
        Assert.notNull(producto, "producto is required");
        
        query.where(stock.producto.eq(producto));
        Path<?>[] paths = new Path<?>[] {stock.producto,stock.dateIn,stock.dateOut};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(PRODUCTO, stock.producto)
			.map(DATE_IN, stock.dateIn)
			.map(DATE_OUT, stock.dateOut);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, stock);
    }
    
}
