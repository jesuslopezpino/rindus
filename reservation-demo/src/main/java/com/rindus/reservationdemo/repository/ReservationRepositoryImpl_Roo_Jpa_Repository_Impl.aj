// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.repository;

import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import com.rindus.reservationdemo.domain.Customer;
import com.rindus.reservationdemo.domain.QReservation;
import com.rindus.reservationdemo.domain.Reservation;
import com.rindus.reservationdemo.domain.Stock;
import com.rindus.reservationdemo.repository.ReservationRepositoryCustom;
import com.rindus.reservationdemo.repository.ReservationRepositoryImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ReservationRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ReservationRepositoryImpl implements ReservationRepositoryCustom;
    
    declare @type: ReservationRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReservationRepositoryImpl.CUSTOMER = "customer";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReservationRepositoryImpl.STOCK_ITEM = "stockItem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReservationRepositoryImpl.START_RESERVATION = "startReservation";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ReservationRepositoryImpl.EXPIRATION_RESERVATION = "expirationReservation";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QReservation reservation = QReservation.reservation;
        
        JPQLQuery<Reservation> query = from(reservation);
        
        Path<?>[] paths = new Path<?>[] {reservation.customer,reservation.stockItem,reservation.startReservation,reservation.expirationReservation};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CUSTOMER, reservation.customer)
			.map(STOCK_ITEM, reservation.stockItem)
			.map(START_RESERVATION, reservation.startReservation)
			.map(EXPIRATION_RESERVATION, reservation.expirationReservation);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, reservation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QReservation reservation = QReservation.reservation;
        
        JPQLQuery<Reservation> query = from(reservation);
        
        Path<?>[] paths = new Path<?>[] {reservation.customer,reservation.stockItem,reservation.startReservation,reservation.expirationReservation};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(reservation.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CUSTOMER, reservation.customer)
			.map(STOCK_ITEM, reservation.stockItem)
			.map(START_RESERVATION, reservation.startReservation)
			.map(EXPIRATION_RESERVATION, reservation.expirationReservation);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, reservation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationRepositoryImpl.findByCustomer(Customer customer, GlobalSearch globalSearch, Pageable pageable) {
        
        QReservation reservation = QReservation.reservation;
        
        JPQLQuery<Reservation> query = from(reservation);
        
        Assert.notNull(customer, "customer is required");
        
        query.where(reservation.customer.eq(customer));
        Path<?>[] paths = new Path<?>[] {reservation.customer,reservation.stockItem,reservation.startReservation,reservation.expirationReservation};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CUSTOMER, reservation.customer)
			.map(STOCK_ITEM, reservation.stockItem)
			.map(START_RESERVATION, reservation.startReservation)
			.map(EXPIRATION_RESERVATION, reservation.expirationReservation);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, reservation);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stockItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Reservation> ReservationRepositoryImpl.findByStockItem(Stock stockItem, GlobalSearch globalSearch, Pageable pageable) {
        
        QReservation reservation = QReservation.reservation;
        
        JPQLQuery<Reservation> query = from(reservation);
        
        Assert.notNull(stockItem, "stockItem is required");
        
        query.where(reservation.stockItem.eq(stockItem));
        Path<?>[] paths = new Path<?>[] {reservation.customer,reservation.stockItem,reservation.startReservation,reservation.expirationReservation};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(CUSTOMER, reservation.customer)
			.map(STOCK_ITEM, reservation.stockItem)
			.map(START_RESERVATION, reservation.startReservation)
			.map(EXPIRATION_RESERVATION, reservation.expirationReservation);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, reservation);
    }
    
}
