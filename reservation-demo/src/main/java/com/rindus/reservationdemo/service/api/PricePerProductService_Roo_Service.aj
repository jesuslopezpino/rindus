// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.service.api;

import com.rindus.reservationdemo.domain.PricePerProduct;
import com.rindus.reservationdemo.domain.Product;
import com.rindus.reservationdemo.domain.Sell;
import com.rindus.reservationdemo.service.api.PricePerProductService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.format.EntityResolver;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

privileged aspect PricePerProductService_Roo_Service {
    
    declare parents: PricePerProductService extends EntityResolver<PricePerProduct, Long>;
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return PricePerProduct
     */
    public abstract PricePerProduct PricePerProductService.findOne(Long id);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pricePerProduct
     */
    public abstract void PricePerProductService.delete(PricePerProduct pricePerProduct);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    public abstract List<PricePerProduct> PricePerProductService.save(Iterable<PricePerProduct> entities);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    public abstract void PricePerProductService.delete(Iterable<Long> ids);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return PricePerProduct
     */
    public abstract PricePerProduct PricePerProductService.save(PricePerProduct entity);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return PricePerProduct
     */
    public abstract PricePerProduct PricePerProductService.findOneForUpdate(Long id);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public abstract List<PricePerProduct> PricePerProductService.findAll(Iterable<Long> ids);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public abstract List<PricePerProduct> PricePerProductService.findAll();
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public abstract long PricePerProductService.count();
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public abstract Page<PricePerProduct> PricePerProductService.findAll(GlobalSearch globalSearch, Pageable pageable);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public abstract Page<PricePerProduct> PricePerProductService.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public abstract Page<PricePerProduct> PricePerProductService.findByProducto(Product producto, GlobalSearch globalSearch, Pageable pageable);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param sell
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public abstract Page<PricePerProduct> PricePerProductService.findBySell(Sell sell, GlobalSearch globalSearch, Pageable pageable);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @return Long
     */
    public abstract long PricePerProductService.countByProducto(Product producto);
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param sell
     * @return Long
     */
    public abstract long PricePerProductService.countBySell(Sell sell);
    
}
