// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.service.impl;

import com.rindus.reservationdemo.domain.Customer;
import com.rindus.reservationdemo.domain.CustomerOrder;
import com.rindus.reservationdemo.domain.Reservation;
import com.rindus.reservationdemo.repository.CustomerRepository;
import com.rindus.reservationdemo.service.api.CustomerOrderService;
import com.rindus.reservationdemo.service.api.ReservationService;
import com.rindus.reservationdemo.service.impl.CustomerServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect CustomerServiceImpl_Roo_Service_Impl {
    
    declare @type: CustomerServiceImpl: @Service;
    
    declare @type: CustomerServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerRepository CustomerServiceImpl.customerRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private CustomerOrderService CustomerServiceImpl.customerOrderService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ReservationService CustomerServiceImpl.reservationService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param customerRepository
     * @param customerOrderService
     * @param reservationService
     */
    @Autowired
    public CustomerServiceImpl.new(CustomerRepository customerRepository, @Lazy CustomerOrderService customerOrderService, @Lazy ReservationService reservationService) {
        setCustomerRepository(customerRepository);
        setCustomerOrderService(customerOrderService);
        setReservationService(reservationService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerRepository
     */
    public CustomerRepository CustomerServiceImpl.getCustomerRepository() {
        return customerRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerRepository
     */
    public void CustomerServiceImpl.setCustomerRepository(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return CustomerOrderService
     */
    public CustomerOrderService CustomerServiceImpl.getCustomerOrderService() {
        return customerOrderService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customerOrderService
     */
    public void CustomerServiceImpl.setCustomerOrderService(CustomerOrderService customerOrderService) {
        this.customerOrderService = customerOrderService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ReservationService
     */
    public ReservationService CustomerServiceImpl.getReservationService() {
        return reservationService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param reservationService
     */
    public void CustomerServiceImpl.setReservationService(ReservationService reservationService) {
        this.reservationService = reservationService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param pedidosToAdd
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.addToPedidos(Customer customer, Iterable<Long> pedidosToAdd) {
        List<CustomerOrder> pedidos = getCustomerOrderService().findAll(pedidosToAdd);
        customer.addToPedidos(pedidos);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param reservasToAdd
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.addToReservas(Customer customer, Iterable<Long> reservasToAdd) {
        List<Reservation> reservas = getReservationService().findAll(reservasToAdd);
        customer.addToReservas(reservas);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param pedidosToRemove
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.removeFromPedidos(Customer customer, Iterable<Long> pedidosToRemove) {
        List<CustomerOrder> pedidos = getCustomerOrderService().findAll(pedidosToRemove);
        customer.removeFromPedidos(pedidos);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param reservasToRemove
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.removeFromReservas(Customer customer, Iterable<Long> reservasToRemove) {
        List<Reservation> reservas = getReservationService().findAll(reservasToRemove);
        customer.removeFromReservas(reservas);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param pedidos
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.setPedidos(Customer customer, Iterable<Long> pedidos) {
        List<CustomerOrder> items = getCustomerOrderService().findAll(pedidos);
        List<CustomerOrder> currents = customer.getPedidos();
        Set<CustomerOrder> toRemove = new HashSet<CustomerOrder>();
        for (Iterator<CustomerOrder> iterator = currents.iterator(); iterator.hasNext();) {
            CustomerOrder nextCustomerOrder = iterator.next();
            if (items.contains(nextCustomerOrder)) {
                items.remove(nextCustomerOrder);
            } else {
                toRemove.add(nextCustomerOrder);
            }
        }
        customer.removeFromPedidos(toRemove);
        customer.addToPedidos(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        customer.setVersion(customer.getVersion() + 1);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param reservas
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.setReservas(Customer customer, Iterable<Long> reservas) {
        List<Reservation> items = getReservationService().findAll(reservas);
        List<Reservation> currents = customer.getReservas();
        Set<Reservation> toRemove = new HashSet<Reservation>();
        for (Iterator<Reservation> iterator = currents.iterator(); iterator.hasNext();) {
            Reservation nextReservation = iterator.next();
            if (items.contains(nextReservation)) {
                items.remove(nextReservation);
            } else {
                toRemove.add(nextReservation);
            }
        }
        customer.removeFromReservas(toRemove);
        customer.addToReservas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        customer.setVersion(customer.getVersion() + 1);
        return getCustomerRepository().save(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     */
    @Transactional
    public void CustomerServiceImpl.delete(Customer customer) {
        // Clear bidirectional one-to-many parent relationship with CustomerOrder
        for (CustomerOrder item : customer.getPedidos()) {
            item.setCustomer(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Reservation
        for (Reservation item : customer.getReservas()) {
            item.setCustomer(null);
        }
        
        getCustomerRepository().delete(customer);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Customer> CustomerServiceImpl.save(Iterable<Customer> entities) {
        return getCustomerRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void CustomerServiceImpl.delete(Iterable<Long> ids) {
        List<Customer> toDelete = getCustomerRepository().findAll(ids);
        getCustomerRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Customer
     */
    @Transactional
    public Customer CustomerServiceImpl.save(Customer entity) {
        return getCustomerRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Customer
     */
    public Customer CustomerServiceImpl.findOne(Long id) {
        return getCustomerRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Customer
     */
    public Customer CustomerServiceImpl.findOneForUpdate(Long id) {
        return getCustomerRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Customer> CustomerServiceImpl.findAll(Iterable<Long> ids) {
        return getCustomerRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Customer> CustomerServiceImpl.findAll() {
        return getCustomerRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long CustomerServiceImpl.count() {
        return getCustomerRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getCustomerRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Customer> CustomerServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getCustomerRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Customer> CustomerServiceImpl.getEntityType() {
        return Customer.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> CustomerServiceImpl.getIdType() {
        return Long.class;
    }
    
}
