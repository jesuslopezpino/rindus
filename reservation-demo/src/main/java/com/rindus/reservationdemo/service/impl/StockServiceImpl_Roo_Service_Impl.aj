// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.service.impl;

import com.rindus.reservationdemo.domain.PricePerProduct;
import com.rindus.reservationdemo.domain.Product;
import com.rindus.reservationdemo.domain.Reservation;
import com.rindus.reservationdemo.domain.Sell;
import com.rindus.reservationdemo.domain.Stock;
import com.rindus.reservationdemo.repository.StockRepository;
import com.rindus.reservationdemo.service.api.PricePerProductService;
import com.rindus.reservationdemo.service.api.ReservationService;
import com.rindus.reservationdemo.service.api.SellService;
import com.rindus.reservationdemo.service.impl.StockServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StockServiceImpl_Roo_Service_Impl {
    
    declare @type: StockServiceImpl: @Service;
    
    declare @type: StockServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private StockRepository StockServiceImpl.stockRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private PricePerProductService StockServiceImpl.pricePerProductService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ReservationService StockServiceImpl.reservationService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private SellService StockServiceImpl.sellService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param stockRepository
     * @param pricePerProductService
     * @param reservationService
     * @param sellService
     */
    @Autowired
    public StockServiceImpl.new(StockRepository stockRepository, @Lazy PricePerProductService pricePerProductService, @Lazy ReservationService reservationService, @Lazy SellService sellService) {
        setStockRepository(stockRepository);
        setPricePerProductService(pricePerProductService);
        setReservationService(reservationService);
        setSellService(sellService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return StockRepository
     */
    public StockRepository StockServiceImpl.getStockRepository() {
        return stockRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stockRepository
     */
    public void StockServiceImpl.setStockRepository(StockRepository stockRepository) {
        this.stockRepository = stockRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return PricePerProductService
     */
    public PricePerProductService StockServiceImpl.getPricePerProductService() {
        return pricePerProductService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pricePerProductService
     */
    public void StockServiceImpl.setPricePerProductService(PricePerProductService pricePerProductService) {
        this.pricePerProductService = pricePerProductService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ReservationService
     */
    public ReservationService StockServiceImpl.getReservationService() {
        return reservationService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param reservationService
     */
    public void StockServiceImpl.setReservationService(ReservationService reservationService) {
        this.reservationService = reservationService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return SellService
     */
    public SellService StockServiceImpl.getSellService() {
        return sellService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param sellService
     */
    public void StockServiceImpl.setSellService(SellService sellService) {
        this.sellService = sellService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param preciosVentaToAdd
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.addToPreciosVenta(Stock stock, Iterable<Long> preciosVentaToAdd) {
        List<PricePerProduct> preciosVenta = getPricePerProductService().findAll(preciosVentaToAdd);
        stock.addToPreciosVenta(preciosVenta);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param reservasToAdd
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.addToReservas(Stock stock, Iterable<Long> reservasToAdd) {
        List<Reservation> reservas = getReservationService().findAll(reservasToAdd);
        stock.addToReservas(reservas);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param ventasToAdd
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.addToVentas(Stock stock, Iterable<Long> ventasToAdd) {
        List<Sell> ventas = getSellService().findAll(ventasToAdd);
        stock.addToVentas(ventas);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param preciosVentaToRemove
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.removeFromPreciosVenta(Stock stock, Iterable<Long> preciosVentaToRemove) {
        List<PricePerProduct> preciosVenta = getPricePerProductService().findAll(preciosVentaToRemove);
        stock.removeFromPreciosVenta(preciosVenta);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param reservasToRemove
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.removeFromReservas(Stock stock, Iterable<Long> reservasToRemove) {
        List<Reservation> reservas = getReservationService().findAll(reservasToRemove);
        stock.removeFromReservas(reservas);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param ventasToRemove
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.removeFromVentas(Stock stock, Iterable<Long> ventasToRemove) {
        List<Sell> ventas = getSellService().findAll(ventasToRemove);
        stock.removeFromVentas(ventas);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param preciosVenta
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.setPreciosVenta(Stock stock, Iterable<Long> preciosVenta) {
        List<PricePerProduct> items = getPricePerProductService().findAll(preciosVenta);
        List<PricePerProduct> currents = stock.getPreciosVenta();
        Set<PricePerProduct> toRemove = new HashSet<PricePerProduct>();
        for (Iterator<PricePerProduct> iterator = currents.iterator(); iterator.hasNext();) {
            PricePerProduct nextPricePerProduct = iterator.next();
            if (items.contains(nextPricePerProduct)) {
                items.remove(nextPricePerProduct);
            } else {
                toRemove.add(nextPricePerProduct);
            }
        }
        stock.removeFromPreciosVenta(toRemove);
        stock.addToPreciosVenta(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        stock.setVersion(stock.getVersion() + 1);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param reservas
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.setReservas(Stock stock, Iterable<Long> reservas) {
        List<Reservation> items = getReservationService().findAll(reservas);
        List<Reservation> currents = stock.getReservas();
        Set<Reservation> toRemove = new HashSet<Reservation>();
        for (Iterator<Reservation> iterator = currents.iterator(); iterator.hasNext();) {
            Reservation nextReservation = iterator.next();
            if (items.contains(nextReservation)) {
                items.remove(nextReservation);
            } else {
                toRemove.add(nextReservation);
            }
        }
        stock.removeFromReservas(toRemove);
        stock.addToReservas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        stock.setVersion(stock.getVersion() + 1);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param ventas
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.setVentas(Stock stock, Iterable<Long> ventas) {
        List<Sell> items = getSellService().findAll(ventas);
        List<Sell> currents = stock.getVentas();
        Set<Sell> toRemove = new HashSet<Sell>();
        for (Iterator<Sell> iterator = currents.iterator(); iterator.hasNext();) {
            Sell nextSell = iterator.next();
            if (items.contains(nextSell)) {
                items.remove(nextSell);
            } else {
                toRemove.add(nextSell);
            }
        }
        stock.removeFromVentas(toRemove);
        stock.addToVentas(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        stock.setVersion(stock.getVersion() + 1);
        return getStockRepository().save(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     */
    @Transactional
    public void StockServiceImpl.delete(Stock stock) {
        // Clear bidirectional many-to-one child relationship with Product
        if (stock.getProducto() != null) {
            stock.getProducto().getProductosStock().remove(stock);
        }
        
        // Clear bidirectional one-to-many parent relationship with PricePerProduct
        for (PricePerProduct item : stock.getPreciosVenta()) {
            item.setStockItem(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Reservation
        for (Reservation item : stock.getReservas()) {
            item.setStockItem(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Sell
        for (Sell item : stock.getVentas()) {
            item.setStockItem(null);
        }
        
        getStockRepository().delete(stock);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Stock> StockServiceImpl.save(Iterable<Stock> entities) {
        return getStockRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void StockServiceImpl.delete(Iterable<Long> ids) {
        List<Stock> toDelete = getStockRepository().findAll(ids);
        getStockRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Stock
     */
    @Transactional
    public Stock StockServiceImpl.save(Stock entity) {
        return getStockRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Stock
     */
    public Stock StockServiceImpl.findOne(Long id) {
        return getStockRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Stock
     */
    public Stock StockServiceImpl.findOneForUpdate(Long id) {
        return getStockRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Stock> StockServiceImpl.findAll(Iterable<Long> ids) {
        return getStockRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Stock> StockServiceImpl.findAll() {
        return getStockRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long StockServiceImpl.count() {
        return getStockRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Stock> StockServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getStockRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Stock> StockServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getStockRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Stock> StockServiceImpl.findByProducto(Product producto, GlobalSearch globalSearch, Pageable pageable) {
        return getStockRepository().findByProducto(producto, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @return Long
     */
    public long StockServiceImpl.countByProducto(Product producto) {
        return getStockRepository().countByProducto(producto);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Stock> StockServiceImpl.getEntityType() {
        return Stock.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> StockServiceImpl.getIdType() {
        return Long.class;
    }
    
}
