// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.web;

import com.rindus.reservationdemo.domain.PricePerProduct;
import com.rindus.reservationdemo.domain.Stock;
import com.rindus.reservationdemo.service.api.PricePerProductService;
import com.rindus.reservationdemo.service.api.StockService;
import com.rindus.reservationdemo.web.StocksCollectionThymeleafController;
import com.rindus.reservationdemo.web.StocksCollectionThymeleafLinkFactory;
import com.rindus.reservationdemo.web.StocksItemPreciosVentaThymeleafController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect StocksItemPreciosVentaThymeleafController_Roo_Thymeleaf {
    
    declare @type: StocksItemPreciosVentaThymeleafController: @Controller;
    
    declare @type: StocksItemPreciosVentaThymeleafController: @RequestMapping(value = "/stocks/{stock}/preciosVenta", name = "StocksItemPreciosVentaThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource StocksItemPreciosVentaThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<StocksCollectionThymeleafController> StocksItemPreciosVentaThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService StocksItemPreciosVentaThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param stockService
     * @param pricePerProductService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public StocksItemPreciosVentaThymeleafController.new(StockService stockService, PricePerProductService pricePerProductService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setStockService(stockService);
        setPricePerProductService(pricePerProductService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(StocksCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource StocksItemPreciosVentaThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void StocksItemPreciosVentaThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<StocksCollectionThymeleafController> StocksItemPreciosVentaThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void StocksItemPreciosVentaThymeleafController.setCollectionLink(MethodLinkBuilderFactory<StocksCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService StocksItemPreciosVentaThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void StocksItemPreciosVentaThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Stock
     */
    @ModelAttribute
    public Stock StocksItemPreciosVentaThymeleafController.getStock(@PathVariable("stock") Long id, Locale locale, HttpMethod method) {
        Stock stock = null;
        if (HttpMethod.PUT.equals(method)) {
            stock = stockService.findOneForUpdate(id);
        } else {
            stock = stockService.findOne(id);
        }
        
        if (stock == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Stock", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return stock;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void StocksItemPreciosVentaThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("startPrice_date_format", "dd/MM/yyyy hh:mm:ss");
        model.addAttribute("endPrice_date_format", "dd/MM/yyyy hh:mm:ss");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void StocksItemPreciosVentaThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stockItem
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<PricePerProduct>> StocksItemPreciosVentaThymeleafController.datatables(@ModelAttribute Stock stockItem, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<PricePerProduct> preciosVenta = getPricePerProductService().findByStockItem(stockItem, search, pageable);
        long totalPreciosVentaCount = getPricePerProductService().countByStockItem(stockItem);
        ConvertedDatatablesData<PricePerProduct> data =  new ConvertedDatatablesData<PricePerProduct>(preciosVenta, totalPreciosVentaCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<PricePerProduct>> StocksItemPreciosVentaThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<PricePerProduct> preciosVenta = getPricePerProductService().findAllByIdsIn(ids, search, pageable);
        long totalPreciosVentaCount = preciosVenta.getTotalElements();
        ConvertedDatatablesData<PricePerProduct> data =  new ConvertedDatatablesData<PricePerProduct>(preciosVenta, totalPreciosVentaCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView StocksItemPreciosVentaThymeleafController.createForm(@ModelAttribute Stock stock, Model model) {
        populateForm(model);
        model.addAttribute("pricePerProduct", new PricePerProduct());
        return new ModelAndView("stocks/preciosVenta/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param preciosVentaToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromPreciosVenta", value = "/{preciosVentaToRemove}")
    @ResponseBody
    public ResponseEntity<?> StocksItemPreciosVentaThymeleafController.removeFromPreciosVenta(@ModelAttribute Stock stock, @PathVariable("preciosVentaToRemove") Long preciosVentaToRemove) {
        getStockService().removeFromPreciosVenta(stock,Collections.singleton(preciosVentaToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param preciosVentaToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromPreciosVentaBatch", value = "/batch/{preciosVentaToRemove}")
    @ResponseBody
    public ResponseEntity<?> StocksItemPreciosVentaThymeleafController.removeFromPreciosVentaBatch(@ModelAttribute Stock stock, @PathVariable("preciosVentaToRemove") Collection<Long> preciosVentaToRemove) {
        getStockService().removeFromPreciosVenta(stock, preciosVentaToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param stock
     * @param preciosVenta
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView StocksItemPreciosVentaThymeleafController.create(@ModelAttribute Stock stock, @RequestParam(value = "preciosVentaIds", required = false) List<Long> preciosVenta, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (preciosVenta != null) {
            for (Iterator<Long> iterator = preciosVenta.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(version != stock.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (preciosVenta != null) {
                stock.setPreciosVenta(new ArrayList<PricePerProduct>(getPricePerProductService().findAll(preciosVenta)));
            }else{
                stock.setPreciosVenta(new ArrayList<PricePerProduct>());
            }
            // Reset the version to prevent update
             stock.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("stock", stock);
            model.addAttribute("concurrency", true);
            return new ModelAndView("stocks/preciosVenta/create");
        }else if(version != stock.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("stock", stock);
            model.addAttribute("concurrency", false);
            return new ModelAndView("stocks/preciosVenta/create");
        }
        getStockService().setPreciosVenta(stock,preciosVenta);
        return new ModelAndView("redirect:" + getCollectionLink().to(StocksCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
