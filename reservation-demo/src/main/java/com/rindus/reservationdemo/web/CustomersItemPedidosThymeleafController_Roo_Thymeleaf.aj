// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.rindus.reservationdemo.web;

import com.rindus.reservationdemo.domain.Customer;
import com.rindus.reservationdemo.domain.CustomerOrder;
import com.rindus.reservationdemo.service.api.CustomerOrderService;
import com.rindus.reservationdemo.service.api.CustomerService;
import com.rindus.reservationdemo.web.CustomersCollectionThymeleafController;
import com.rindus.reservationdemo.web.CustomersCollectionThymeleafLinkFactory;
import com.rindus.reservationdemo.web.CustomersItemPedidosThymeleafController;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect CustomersItemPedidosThymeleafController_Roo_Thymeleaf {
    
    declare @type: CustomersItemPedidosThymeleafController: @Controller;
    
    declare @type: CustomersItemPedidosThymeleafController: @RequestMapping(value = "/customers/{customer}/pedidos", name = "CustomersItemPedidosThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource CustomersItemPedidosThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<CustomersCollectionThymeleafController> CustomersItemPedidosThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService CustomersItemPedidosThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param customerService
     * @param customerOrderService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public CustomersItemPedidosThymeleafController.new(CustomerService customerService, CustomerOrderService customerOrderService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setCustomerService(customerService);
        setCustomerOrderService(customerOrderService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(CustomersCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource CustomersItemPedidosThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void CustomersItemPedidosThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<CustomersCollectionThymeleafController> CustomersItemPedidosThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void CustomersItemPedidosThymeleafController.setCollectionLink(MethodLinkBuilderFactory<CustomersCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService CustomersItemPedidosThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void CustomersItemPedidosThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Customer
     */
    @ModelAttribute
    public Customer CustomersItemPedidosThymeleafController.getCustomer(@PathVariable("customer") Long id, Locale locale, HttpMethod method) {
        Customer customer = null;
        if (HttpMethod.PUT.equals(method)) {
            customer = customerService.findOneForUpdate(id);
        } else {
            customer = customerService.findOne(id);
        }
        
        if (customer == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Customer", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return customer;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CustomersItemPedidosThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("orderDate_date_format", "dd/MM/yyyy hh:mm:ss");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CustomersItemPedidosThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<CustomerOrder>> CustomersItemPedidosThymeleafController.datatables(@ModelAttribute Customer customer, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<CustomerOrder> pedidos = getCustomerOrderService().findByCustomer(customer, search, pageable);
        long totalPedidosCount = getCustomerOrderService().countByCustomer(customer);
        ConvertedDatatablesData<CustomerOrder> data =  new ConvertedDatatablesData<CustomerOrder>(pedidos, totalPedidosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<CustomerOrder>> CustomersItemPedidosThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<CustomerOrder> pedidos = getCustomerOrderService().findAllByIdsIn(ids, search, pageable);
        long totalPedidosCount = pedidos.getTotalElements();
        ConvertedDatatablesData<CustomerOrder> data =  new ConvertedDatatablesData<CustomerOrder>(pedidos, totalPedidosCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView CustomersItemPedidosThymeleafController.createForm(@ModelAttribute Customer customer, Model model) {
        populateForm(model);
        model.addAttribute("customerOrder", new CustomerOrder());
        return new ModelAndView("customers/pedidos/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param pedidosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromPedidos", value = "/{pedidosToRemove}")
    @ResponseBody
    public ResponseEntity<?> CustomersItemPedidosThymeleafController.removeFromPedidos(@ModelAttribute Customer customer, @PathVariable("pedidosToRemove") Long pedidosToRemove) {
        getCustomerService().removeFromPedidos(customer,Collections.singleton(pedidosToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param pedidosToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromPedidosBatch", value = "/batch/{pedidosToRemove}")
    @ResponseBody
    public ResponseEntity<?> CustomersItemPedidosThymeleafController.removeFromPedidosBatch(@ModelAttribute Customer customer, @PathVariable("pedidosToRemove") Collection<Long> pedidosToRemove) {
        getCustomerService().removeFromPedidos(customer, pedidosToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param customer
     * @param pedidos
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView CustomersItemPedidosThymeleafController.create(@ModelAttribute Customer customer, @RequestParam(value = "pedidosIds", required = false) List<Long> pedidos, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (pedidos != null) {
            for (Iterator<Long> iterator = pedidos.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(version != customer.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (pedidos != null) {
                customer.setPedidos(new HashSet<CustomerOrder>(getCustomerOrderService().findAll(pedidos)));
            }else{
                customer.setPedidos(new HashSet<CustomerOrder>());
            }
            // Reset the version to prevent update
             customer.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("customer", customer);
            model.addAttribute("concurrency", true);
            return new ModelAndView("customers/pedidos/create");
        }else if(version != customer.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("customer", customer);
            model.addAttribute("concurrency", false);
            return new ModelAndView("customers/pedidos/create");
        }
        getCustomerService().setPedidos(customer,pedidos);
        return new ModelAndView("redirect:" + getCollectionLink().to(CustomersCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
